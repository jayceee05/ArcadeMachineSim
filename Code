import java.util.Scanner;
import java.util.Random;

// Clase base Juego que contiene los atributos y métodos comunes para los juegos
abstract class Juego {

    // Atributos comunes a todos los juegos
    private String nombre;
    private String correo;
    private String telefono;
    private String fechaNac;
    protected int vidas;
    protected int numJuego;
    protected String resultado;
    protected int eleccion;

    // Constructor de la clase Juego
    public Juego() {
        this.nombre = "";
        this.correo = "";
        this.telefono = "";
        this.fechaNac = "";
        this.numJuego = 0;
        this.vidas = 0;
        this.resultado = "";
        this.eleccion = 0;
    }

    // Método para obtener los datos del jugador
    public void getJuego(Scanner input) {
        System.out.println("Nombre jugador: ");
        this.nombre = input.next();
        System.out.println("Correo: ");
        this.correo = input.next();
        System.out.println("Telefono: ");
        this.telefono = input.next();
        System.out.println("Fecha de nacimiento (DD/MM/YYYY): ");
        this.fechaNac = input.next();
    }

    // Método abstracto para jugar el juego
    public abstract void jugar(Scanner input) throws InterruptedException;

    // Método para registrar el juego
    public void registrarJuego() {
        System.out.println("Nombre: " + this.nombre);
        System.out.println("Correo: " + this.correo);
        System.out.println("Telefono: " + this.telefono);
        System.out.println("Fecha de Nacimiento: " + this.fechaNac);
        System.out.println("Número de juego: " + this.numJuego);
        System.out.println("Resultado: " + this.resultado);
    }
}

// Subclase RNG que implementa el juego "Adivina el número"
class RNG extends Juego {

    int numeroRNG;
    Random random = new Random();

    // Método para jugar "Adivina el número"
    public void jugar(Scanner input) throws InterruptedException {
        this.vidas = 3;
        System.out.println("Pensando en un numero entre el 1 y 10...");
        Thread.sleep(1000);
        System.out.println("...");
        Thread.sleep(1000);
        System.out.println("...");
        Thread.sleep(1000);
        this.numeroRNG = random.nextInt(10) + 1;
        System.out.println("Vidas: " + this.vidas + "\nListo! En que numero estoy pensando?");
        do {
            System.out.println("Eleccion: ");
            this.eleccion = input.nextInt();
            if (this.eleccion != numeroRNG) {
                this.vidas -= 1;
                System.out.println("Vidas: " + this.vidas + "\nMmm estoy pensando en uno diferente...");
            } else if (this.eleccion == numeroRNG) {
                System.out.println("Correcto! Bien hecho!");
            }
        } while (numeroRNG != this.eleccion && this.vidas > 0);
        if (this.vidas == 0) {
            System.out.println("Tan cerca! El numero en el que estaba pensando es " + numeroRNG);
            this.resultado = "Derrota";
        } else {
            this.resultado = "Victoria";
        }
        this.numJuego += 1;
    }
}

// Subclase Dinero que implementa el juego "Busca-Dinero"
class Dinero extends Juego {

    int[][] tablero = new int[3][3];
    Random random = new Random();
    int filaDinero;
    int columnaDinero;

    // Método para inicializar el tablero del juego "Busca-Dinero"
    private void inicializarTablero() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                tablero[i][j] = 0;
            }
        }
        this.filaDinero = random.nextInt(3);
        this.columnaDinero = random.nextInt(3);
        tablero[filaDinero][columnaDinero] = 1; // Ubicar el símbolo de dinero en el tablero
    }

    // Método para mostrar el tablero del juego "Busca-Dinero"
    private void mostrarTablero() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tablero[i][j] == 1) {
                    System.out.print("$ ");
                } else {
                    System.out.print("* ");
                }
            }
            System.out.println();
        }
    }

    // Método para jugar "Busca-Dinero"
    public void jugar(Scanner input) {
        inicializarTablero();
        int intentos = 3;
        System.out.println("Bienvenido al juego Busca-Dinero!");
        mostrarTablero();
        while (intentos > 0) {
            System.out.println("Ingrese la fila y columna donde cree que está el dinero (ejemplo: 1 2): ");
            int fila = input.nextInt() - 1;
            int columna = input.nextInt() - 1;
            if (fila == filaDinero && columna == columnaDinero) {
                System.out.println("¡Encontraste el dinero! ¡Ganaste!");
                this.resultado = "Victoria";
                break;
            } else {
                System.out.println("¡Incorrecto! Sigue intentando.");
                intentos--;
            }
        }
        if (intentos == 0) {
            System.out.println("Se acabaron los intentos. El dinero estaba en la fila " + (filaDinero + 1) + " columna " + (columnaDinero + 1));
            this.resultado = "Derrota";
        }
        this.numJuego += 1;
    }
}

// Subclase As que implementa el juego "As de corazones"
class As extends Juego {

    int[] cartas = new int[5];
    Random random = new Random();
    int posicionCorazon;

    // Método para inicializar las cartas del juego "As de corazones"
    private void inicializarCartas() {
        for (int i = 0; i < 5; i++) {
            cartas[i] = 0;
        }
        posicionCorazon = random.nextInt(5);
        cartas[posicionCorazon] = 1; // Colocar el corazón en una posición aleatoria
    }

    // Método para mostrar las cartas del juego "As de corazones"
    private void mostrarCartas() {
        for (int i = 0; i < 5; i++) {
            if (cartas[i] == 1) {
                System.out.print("♥ ");
            } else {
                System.out.print("* ");
            }
        }
        System.out.println(“”);
    // Método para jugar "As de corazones"
    public void jugar(Scanner input) {
        inicializarCartas();
        int intentos = 3;
        System.out.println("Bienvenido al juego As de corazones!");
        mostrarCartas();
        while (intentos > 0) {
            System.out.println("Ingrese la posición donde cree que está el corazón (1-5): ");
            int posicion = input.nextInt() - 1;
            if (posicion == posicionCorazon) {
                System.out.println("¡Encontraste el corazón! ¡Ganaste!");
                this.resultado = "Victoria";
                break;
            } else {
                System.out.println("¡Incorrecto! Sigue intentando.");
                intentos--;
            }
        }
        if (intentos == 0) {
            System.out.println("Se acabaron los intentos. El corazón estaba en la posición " + (posicionCorazon + 1));
            this.resultado = "Derrota";
        }
        this.numJuego += 1;
    }
}

public class Main {

    public static void main(String[] args) throws InterruptedException {
        Scanner input = new Scanner(System.in);
        char opcion;
        Juego juegoNuevo = null;
        int contador = 0;

        do {
            System.out.println("-----ARCADE-----\n\n1) Adivina el numero\n2) Busca-Dinero\n3) As de corazones\n\nJugar: ");
            opcion = input.next().charAt(0);
            switch (opcion) {
                case '1':
                    juegoNuevo = new RNG();
                    juegoNuevo.getJuego(input);
                    juegoNuevo.jugar(input);
                    contador += 1;
                    break;
                case '2':
                    juegoNuevo = new Dinero();
                    juegoNuevo.getJuego(input);
                    juegoNuevo.jugar(input);
                    contador += 1;
                    break;
                case '3':
                    juegoNuevo = new As();
                    juegoNuevo.getJuego(input);
                    juegoNuevo.jugar(input);
                    contador += 1;
                    break;
                default:
                    System.out.println("Opcion no valida");
                    break;
            }
            if (contador != 10) {
                System.out.println("\nSeguir jugando?\ns) Si\nn) No");
                opcion = input.next().charAt(0);
            }
        } while (opcion != 'n');

        // Reporte final
        System.out.println("Reporte final:");
        juegoNuevo.registrarJuego();
    }
}
